<?xml version="1.0" encoding="UTF-8"?>
<job
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="urn:proactive:jobdescriptor:3.10"
        xsi:schemaLocation="urn:proactive:jobdescriptor:3.10 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.10/schedulerjob.xsd"
        name="Swarm" projectName="Cloud Automation - Deployment"
        priority="normal"
        onTaskError="continueJobExecution"
        maxNumberOfExecution="2"
>
  <variables>
    <variable name="consul_port" value="8500" />
    <variable name="swarm_manager_port" value="4000" />
    <variable name="instance_name" value="my_instance" />
    <variable name="networkName" value="my-net" />
 <!--   <variable name="subnet" value="25.25.25.0/24" />
    <variable name="userSSH" value="cperUser" />-->
  </variables>
  <description>
    <![CDATA[ Deployment of swarm. ]]>
  </description>
  <genericInformation>
    <info name="Documentation" value="http://activeeon.com/resources/activeeon-deploy-swarm-hdfs-spark.pdf"/>
    <info name="group" value="public-objects"/>
    <info name="pca.action.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png"/>
    <info name="pca.service.id" value="HDFS-Spark"/>
    <info name="pca.states" value="(PA_NODES_RESERVED,SWARM_DEPLOYED)"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/swarm.png"/>
  </genericInformation>
  <taskFlow>
    <task name="get_nodes_urls_from_service_instance">
      <inputFiles>
        <files  includes="cloud-automation-service-client-8.1.0.jar" accessMode="transferFromGlobalSpace"/>
        <files  includes="logging-interceptor-2.7.5.jar" accessMode="transferFromGlobalSpace"/>
        <files  includes="okhttp-2.7.5.jar" accessMode="transferFromGlobalSpace"/>
        <files  includes="okio-1.6.0.jar" accessMode="transferFromGlobalSpace"/>
        <files  includes="gson-2.6.2.jar" accessMode="transferFromGlobalSpace"/>
        <files  includes="spring-web-4.2.5.RELEASE.jar" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="cloud-automation-service-client-8.1.0.jar"/>
          <pathElement path="logging-interceptor-2.7.5.jar"/>
          <pathElement path="okhttp-2.7.5.jar"/>
          <pathElement path="okio-1.6.0.jar"/>
          <pathElement path="gson-2.6.2.jar"/>
          <pathElement path="spring-web-4.2.5.RELEASE.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
/*
import io.swagger.client.ApiClient
import io.swagger.client.api.ServiceInstanceRestApi
import io.swagger.client.model.ServiceInstanceData

// Retrieve variables
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def service_instance_id = variables.get("PCA_INSTANCE_ID") as Long

// Define other variables
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

// Get the targeted resources the PCA service instance
def service_instance_data = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id)
def node_source_name = service_instance_data.getVariables().get("node_source_name")
def nb_nodes = service_instance_data.getVariables().get("nb_nodes")
*/
variables.put("node_source_name", "local"/*node_source_name*/)
variables.put("nb_nodes", "3"/*nb_nodes*/)
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="start_consul">
      <depends>
        <task ref="get_nodes_urls_from_service_instance"/>
      </depends>
      <selection>
        <script>
          <code language="groovy">
            <![CDATA[
if (variables.get("node_source_name").equals(System.getProperty("proactive.node.nodesource"))) {
    selected = true
} else {
   selected = false
}
]]>
          </code>
        </script>
      </selection>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// REQUIREMENTS
// http://www.thegeekstuff.com/2016/02/docker-machine-create-generic/
// passwordless or use ssh agent

// DOCKER ISSUE
// The only temporary fix is to let your user explicitly allow sudo to be used without a password.
// edit /etc/sudoers and add  YOURUSERNAME ALL=(ALL) NOPASSWD:ALL
// This is until #1586 is merged

// TIPS on try
// sudo journalctl -fu docker.service
// sudo systemctl start docker
// always check /etc/systemd/system/docker.service if daemon did not run


import org.objectweb.proactive.core.util.ProActiveInet

println "start_consul ..."

def consul_IP_address = ProActiveInet.getInstance().getInetAddress().getHostAddress()
variables.put("consul_IP_address", consul_IP_address)

def cmd = ["docker", "run", "-d", "-p", variables.get("consul_port") + ":8500", "--name", variables.get("instance_name") + "-consul", "progrium/consul", "-server", "-bootstrap", "-advertise", consul_IP_address]
cmd.execute().waitForProcessOutput(System.out, System.err)

println "... start_consul"
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="start_swarm_manager">
      <depends>
        <task ref="start_consul"/>
      </depends>
      <selection>
        <script>
          <code language="groovy">
            <![CDATA[
if (variables.get("node_source_name").equals(System.getProperty("proactive.node.nodesource"))) {
    selected = true
} else {
   selected = false
}
]]>
          </code>
        </script>
      </selection>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.objectweb.proactive.core.util.ProActiveInet

println "start_swarm_manager ..."

def swarm_manager_IP_address = ProActiveInet.getInstance().getInetAddress().getHostAddress()
variables.put("swarm_manager_IP_address", swarm_manager_IP_address)
def consul_IP_address = variables.get("consul_IP_address")

def cmd = ["docker", "run", "-d", "-p", variables.get("swarm_manager_port") + ":4000", "--name", variables.get("instance_name") + "-swarm_manager", "swarm", "manage", "-H", ":4000", "--replication", "--advertise", swarm_manager_IP_address + ":4000", "consul://" + consul_IP_address + ":8500"]
cmd.execute().waitForProcessOutput(System.out, System.err)

println "... start_swarm_manager"
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow >
        <replicate>
          <script>
            <code language="groovy">
              <![CDATA[
runs = variables.get("nb_nodes")
]]>
            </code>
          </script>
        </replicate>
      </controlFlow>
    </task>
    <task name="start_swarm_agents">
      <depends>
        <task ref="start_swarm_manager"/>
      </depends>
      <selection>
        <script>
          <code language="groovy">
            <![CDATA[
if (variables.get("node_source_name").equals(System.getProperty("proactive.node.nodesource"))) {
    selected = true
} else {
   selected = false
}
]]>
          </code>
        </script>
      </selection>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.objectweb.proactive.core.util.ProActiveInet

println "start_swarm_agents ..."

def task_id = variables.get("PA_TASK_REPLICATION")
def consul_IP_address = variables.get("consul_IP_address")
def swarm_node_IP_address = ProActiveInet.getInstance().getInetAddress().getHostAddress()

def cmd = ["docker", "run", "-d", "swarm", "join", "--name", variables.get("instance_name") + "-swarm_node_" + task_id, "--advertise", swarm_node_IP_address + ":2375", "consul://" + consul_IP_address + ":8500"]
cmd.execute().waitForProcessOutput(System.out, System.err)

println "... start_swarm_agents"
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="update_service_instance">
      <depends>
        <task ref="create_overlay_network"/>
      </depends>
      <inputFiles>
        <files  includes="cloud-automation-service-client-8.1.0.jar" accessMode="transferFromGlobalSpace"/>
        <files  includes="logging-interceptor-2.7.5.jar" accessMode="transferFromGlobalSpace"/>
        <files  includes="okhttp-2.7.5.jar" accessMode="transferFromGlobalSpace"/>
        <files  includes="okio-1.6.0.jar" accessMode="transferFromGlobalSpace"/>
        <files  includes="gson-2.6.2.jar" accessMode="transferFromGlobalSpace"/>
        <files  includes="spring-web-4.2.5.RELEASE.jar" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="cloud-automation-service-client-8.1.0.jar"/>
          <pathElement path="logging-interceptor-2.7.5.jar"/>
          <pathElement path="okhttp-2.7.5.jar"/>
          <pathElement path="okio-1.6.0.jar"/>
          <pathElement path="gson-2.6.2.jar"/>
          <pathElement path="spring-web-4.2.5.RELEASE.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import io.swagger.client.ApiClient
import io.swagger.client.api.ServiceInstanceRestApi
import io.swagger.client.model.ServiceInstanceData

println "update_service_state ..."

// Retrieve variables
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def service_instance_id = variables.get("PCA_INSTANCE_ID") as Long
def dashboard_host_name = variables.get("dashboard_host_name")
def dashboard_port = variables.get("dashboard_port")

// Define other variables
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
api_client.setDebugging(true)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

// Update the related service instance
def service_instance_data = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id)
service_instance_data.setInstanceStatus("SWARM_DEPLOYED")
service_instance_data.getInstanceEndpoints().put("consul_portal", dashboard_host_name + ":" + dashboard_port)
service_instance_rest_api.updateServiceInstanceUsingPUT(service_instance_id, service_instance_data)

println "... update_service_state"
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <!--<task name="check_consul">
      <depends>
        <task ref="set_iterator_value"/>
      </depends>
      <selection>
        <script>
          <code language="groovy">
            <![CDATA[
if (variables.get("node_source_name").equals(System.getProperty("proactive.node.nodesource"))) {
    selected = true
} else {
   selected = false
}
]]>
          </code>
        </script>
      </selection>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
//check that the docker daemon is running on the consul machine
def command = "docker-machine env "+variables.get("instance_name")+"-consul-machine"
def sout = new StringBuilder(), serr = new StringBuilder()
command.execute().waitForProcessOutput(sout,serr)
println "sout " + sout
println "serr " + serr

def error = serr.count("Error");
if(error <= 0){
 	variables.put("iterator",0)
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow >
        <loop target="check_consul">
          <script>
            <code language="javascript">
              <![CDATA[
variables["iterator"]=variables.get("iterator")-1;
if(variables.get("iterator")>=0){
    loop = '* * * * *';
  	println("waiting");
} else {
    loop = false;
}
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
    </task>
    <task name="set_iterator_value">
      <depends>
        <task ref="start_consul"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="javascript">
            <![CDATA[
variables["iterator"]=variables.get("attempt");
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="set_iterator_value2">
      <depends>
        <task ref="start_swarm_manager"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="javascript">
            <![CDATA[
variables["iterator"]=variables.get("attempt");
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="check_consul2">
      <depends>
        <task ref="set_iterator_value2"/>
      </depends>
      <selection>
        <script>
          <code language="groovy">
            <![CDATA[
if (variables.get("node_source_name").equals(System.getProperty("proactive.node.nodesource"))) {
    selected = true
} else {
   selected = false
}
]]>
          </code>
        </script>
      </selection>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
//check that the docker daemon is running on the consul machine
def command = "docker-machine env "+variables.get("instance_name")+"-consul-machine"
def sout = new StringBuilder(), serr = new StringBuilder()
command.execute().waitForProcessOutput(sout,serr)
println "sout " + sout
println "serr " + serr

def error = serr.count("Error");
if(error <= 0){
 	variables.put("iterator",0)
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow >
        <loop target="check_consul2">
          <script>
            <code language="javascript">
              <![CDATA[
variables["iterator"]=variables.get("iterator")-1;
if(variables.get("iterator")>=0){
    loop = '* * * * *';
  	println("waiting");
} else {
    loop = false;
}
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
    </task>-->
    <task name="create_overlay_network">
      <depends>
        <task ref="start_swarm_agents"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo "create_overlay_network ..."

networkName=$variables_networkName
machineName=$variables_instance_name;
attempt=20;
sleepTime=1;
DOCKER_TLS_VERIFY="";

i=0;
while [ $i -lt $attempt ]; do
    ((i++));
	eval $(docker-machine env $machineName);
    if [ -n "$DOCKER_TLS_VERIFY" ];
    then
		i=$(($attempt+1));
    else
		sleep $sleepTime;
		echo "Waiting $sleepTime s";
    fi
done

if [ $i -eq $(($attempt+1)) ];
then
	echo "Variables sucessfully set up";
else
  	echo "After $attempt attempts, fail to set up the docker variables, connection aborted";
fi


docker network create --driver overlay --subnet=$variables_subnet $networkName

echo "... create_overlay_network"
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <!--<task name="useless_0">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <depends>
        <task ref="check_consul2"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println ""
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow >
        <replicate>
          <script>
            <code language="groovy">
              <![CDATA[
runs = variables.get("nb_nodes")
]]>
            </code>
          </script>
        </replicate>
      </controlFlow>
    </task>-->
  </taskFlow>
</job>