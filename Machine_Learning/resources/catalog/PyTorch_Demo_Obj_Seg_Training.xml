<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.8"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.8 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.8/schedulerjob.xsd"
    name="PyTorch_Demo_Obj_Seg_Training" projectName="Machine Learning"
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2">
  <variables>
    <variable name="CONTAINER_NAME" value="ml" />
    <variable name="NUM_EPOCHS" value="3" model=""/>
  </variables>
  <description>
    <![CDATA[ Train an image segmentation algorithm  using using PyTorch. In this demo, we train an algorithm to segment horses in the input image using a deep neural network (DNN). ]]>
  </description>
  <genericInformation>
    <info name="Documentation" value="http://activeeon.com/resources/automated-machine-learning-activeeon.pdf"/>
  </genericInformation>
  <taskFlow>
    <task name="Training_Task">
      <description>
        <![CDATA[ The simplest task, ran by a cmd engine. ]]>
      </description>
      <depends>
        <task ref="Download_Data"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
# Training task
docker exec $variables_CONTAINER_NAME /bin/bash -c "cd /root/deepseg_horse && python binseg_train_fast.py $variables_NUM_EPOCHS"

]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="Download_Data">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
#
# unset RUN_DOCKER
# docker stop ml && docker rm ml
# export variables_CONTAINER_NAME=ml && export variables_NUM_EPOCHS=3
#
export RUN_DOCKER="docker run -dit -h dlm -w /root --name=$variables_CONTAINER_NAME andrewssobral/dlm3:yolo"
echo "Checking if docker container is running"
if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "true" ]; 
then 
  echo "OK. The $variables_CONTAINER_NAME container is running!"
else 
  echo "$variables_CONTAINER_NAME container is not running."
  echo "Running it..."
  echo $RUN_DOCKER
  $($RUN_DOCKER)
  sleep 5
  if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "true" ]; 
  then 
    echo "OK. The $variables_CONTAINER_NAME container is running now!"
  else 
    echo "$variables_CONTAINER_NAME container is not running."
    echo "An error occurred while running the container."
    exit
  fi
fi

docker exec $variables_CONTAINER_NAME /bin/sh -c "rm -r -f deepseg_horse"
docker exec $variables_CONTAINER_NAME /bin/sh -c "wget https://s3.eu-central-1.amazonaws.com/activeeonpublic/deepseg/src/deepseg_horse.zip"
docker exec $variables_CONTAINER_NAME /bin/sh -c "unzip deepseg_horse.zip -d deepseg_horse"
docker exec $variables_CONTAINER_NAME /bin/sh -c "rm -r deepseg_horse.zip"
docker exec $variables_CONTAINER_NAME /bin/sh -c "cd /root/deepseg_horse/dataset && wget https://s3.eu-central-1.amazonaws.com/activeeonpublic/deepseg/dataset/weizmann_horse.zip && unzip weizmann_horse.zip && rm -r weizmann_horse.zip"
# docker exec $variables_CONTAINER_NAME /bin/sh -c "ls /root/deepseg_horse/dataset"

]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
  </taskFlow>
</job>