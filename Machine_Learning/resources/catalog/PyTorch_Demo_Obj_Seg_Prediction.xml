<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.8"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.8 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.8/schedulerjob.xsd"
    name="PyTorch_Demo_Obj_Seg_Prediction" projectName="Machine Learning"
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2">
  <variables>
    <variable name="INPUT_IMAGE" value="horse.jpg" />
    <variable name="OUTPUT_IMAGE" value="output.jpg" />
    <variable name="CONTAINER_NAME" value="ml" />
  </variables>
  <description>
    <![CDATA[ Perform image segmentation using using PyTorch. In this demo, we show how to segment horses in the input image using a deep neural network (DNN). ]]>
  </description>
  <genericInformation>
    <info name="Documentation" value="http://activeeon.com/resources/automated-machine-learning-activeeon.pdf"/>
  </genericInformation>
  <taskFlow>
    <task name="Obj_Segmentation">
      <description>
        <![CDATA[ The simplest task, ran by a cmd engine. ]]>
      </description>
      <depends>
        <task ref="Preview_Input"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
docker exec $variables_CONTAINER_NAME /bin/bash -c "cd /root/deepseg_horse && python binseg_predict_fast.py $variables_INPUT_IMAGE"
mkdir -p /tmp/output
docker cp $variables_CONTAINER_NAME:/root/deepseg_horse/output.jpg /tmp/output/$variables_OUTPUT_IMAGE
# docker exec $variables_CONTAINER_NAME /bin/sh -c "ls /root/deepseg_horse"
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="Preview_Input">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <depends>
        <task ref="Download_Data"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// def task_id = variables.get("PA_TASK_REPLICATION")
// def image_name = variables.get("image_" + task_id)

//def home = variables.get("home")
def home = "/tmp/data"
def input_image = variables.get("INPUT_IMAGE")

image_path  = home + "/" + input_image

println "home: " + home 
println "input_image: " + input_image
println "image_path  : " + image_path  

def image_file = new File(image_path)
println "exists? " + image_file.exists()

result = image_file.getBytes()
resultMetadata.put("file.name", input_image)
resultMetadata.put("content.type", "image/jpg")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Preview_Output">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <depends>
        <task ref="Obj_Segmentation"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// def task_id = variables.get("PA_TASK_REPLICATION")
// def image_name = variables.get("image_" + task_id)

//def home = variables.get("home")
def home = "/tmp/output"
def output_image = variables.get("OUTPUT_IMAGE")

image_path  = home + "/" + output_image

println "home: " + home 
println "output_image: " + output_image
println "image_path  : " + image_path  

def image_file = new File(image_path)
println "exists? " + image_file.exists()

result = image_file.getBytes()
resultMetadata.put("file.name", output_image)
resultMetadata.put("content.type", "image/jpg")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Download_Data">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
#
# unset RUN_DOCKER
# docker stop ml && docker rm ml
# export variables_CONTAINER_NAME=ml && export variables_INPUT_IMAGE=horse.jpg && export variables_OUTPUT_IMAGE=output.jpg
#
export RUN_DOCKER="docker run -dit -h dlm -w /root --name=$variables_CONTAINER_NAME andrewssobral/dlm3:yolo"
echo "Checking if docker container is running"
if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "true" ]; 
then 
  echo "OK. The $variables_CONTAINER_NAME container is running!"
else 
  echo "$variables_CONTAINER_NAME container is not running."
  echo "Running it..."
  echo $RUN_DOCKER
  $($RUN_DOCKER)
  sleep 5
  if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "true" ]; 
  then 
    echo "OK. The $variables_CONTAINER_NAME container is running now!"
  else 
    echo "$variables_CONTAINER_NAME container is not running."
    echo "An error occurred while running the container."
    exit
  fi
fi

docker exec $variables_CONTAINER_NAME /bin/sh -c "rm -r -f deepseg_horse"
docker exec $variables_CONTAINER_NAME /bin/sh -c "wget https://s3.eu-central-1.amazonaws.com/activeeonpublic/deepseg/src/deepseg_horse.zip"
docker exec $variables_CONTAINER_NAME /bin/sh -c "unzip deepseg_horse.zip -d deepseg_horse"
docker exec $variables_CONTAINER_NAME /bin/sh -c "rm -r deepseg_horse.zip"
docker exec $variables_CONTAINER_NAME /bin/sh -c "cd /root/deepseg_horse/model && wget https://s3.eu-central-1.amazonaws.com/activeeonpublic/deepseg/model/segnet64.pth"
# docker exec $variables_CONTAINER_NAME /bin/sh -c "ls /root/deepseg_horse/model"

mkdir -p /tmp/data
docker cp $variables_CONTAINER_NAME:/root/deepseg_horse/$variables_INPUT_IMAGE /tmp/data/$variables_INPUT_IMAGE
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
  </taskFlow>
</job>