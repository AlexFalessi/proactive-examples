<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.8"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.8 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.8/schedulerjob.xsd"
    name="Untitled workflow 1" 
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2"
>
 <variables>
      <variable name="proactive_exemple_path" value="C:/workspace/proactive-examples" />
      <variable name="global_space_path" value="C:/workspace/scheduling/data/defaultglobal" />
 </variables>
 
  <taskFlow>
    <task name="Groovy_Task">
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption

// Retrieve variables
def proactive_exemple_path = variables.get("proactive_exemple_path")
def global_space_path = variables.get("global_space_path")

def target_dir_path = ""

// For each example directory
new File(proactive_exemple_path).eachDir() { dir ->  
    def metadata_file = new File(dir.absolutePath, "METADATA.json")
	if (metadata_file.exists())
	{
      	println metadata_file.absolutePath	
      
		// From json to map
		def slurper = new groovy.json.JsonSlurper()
		def metadata_file_map = (Map) slurper.parseText(metadata_file.text)
      	
        def catalog_map = metadata_file_map.get("catalog")
		
		
		// DATASPACE SECTION /////////////////////////////
		
		
		if ((dataspace_map = catalog_map.get("dataspace")) != null)
        {
		  // Retrieve the targeted directory path
          def target = dataspace_map.get("target")
		  if(target == "global")
			target_dir_path = global_space_path
			
		  // Copy all files into the targeted directory
		  dataspace_map.get("files").each { file_relative_path ->
		    def file_src = new File(dir.absolutePath, file_relative_path)
			def file_src_path = file_src.absolutePath
			def file_name = file_src.getName()
			def file_dest = new File(target_dir_path, file_name)	
			def file_dest_path = file_dest.absolutePath
			Files.copy(Paths.get(file_src_path), Paths.get(file_dest_path), StandardCopyOption.REPLACE_EXISTING)
		  }
		}
		
		// OBJECTS SECTION /////////////////////////////
		
		catalog_map.get("objects").each { object ->
			
			println object
			
			def metadata_map = object.get("metadata")
			
			
			// WORKFLOWS SECTION /////////////////////////////
			if (metadata_map.get("kind") == "workflow")
			{
				def workflow_relative_path = object.get("file")
				println workflow_relative_path
			}
			
		}
		
	}
}
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Groovy_Task2">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <depends>
        <task ref="Groovy_Task"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println "uname -a".execute().text
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
</job>